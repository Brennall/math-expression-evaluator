{"name":"Math-expression-evaluator","tagline":"An advanced,light-weight and efficient evaluator for Math expression using Javascript","body":"## INTRODUCTION  \r\nA simple to use and efficient evaluator for math expressions in Javascript.  \r\n##Topics  \r\n- [Installation](#installation)\r\n    - [Node JS](#node-js)\r\n    - [Browser](#browser)\r\n- [Supported Math Symbols](#supported-maths-symbols)\r\n- [Usage](#usage)\r\n    - [Using mexp.eval()](#mexp%2Eeval method)\r\n    - [Using constituents of mexp.eval methods](#constituents-of-mexp.eval-method)\r\n    - [Extending tokens](#extending-tokens)\r\n        - [Defining a token](#how-to-define-a-token)\r\n            - [Function with one parameter](#function-with-one-parameter)\r\n            - [Function with two parameters](#function-with-two-parameters)\r\n            - [Function with three parameters](#function-with-three-parameters)\r\n            - [Variable](#variable)\r\n            - [Binary infix function](#binary-infix-function)\r\n            - [Unary postfix function](#unary-postfix-function)\r\n        - [Adding tokens using mexp.addToken](#adding-tokens-using-mexp.addToken-method)\r\n        - [Adding tokens using mexp.eval()](#adding-tokens-using-mexp.eval-method)\r\n        - [Adding token using constituents of mexp.eval()](#adding-tokens-using-constituents-of-mexp.eval)\r\n    - [Error Handling](#error-handling)  \r\n\r\n##Installation  \r\n###Node js  \r\n\tvar mexp = require('math-expression-evaluator');\r\n###Browser  \r\n\t<script src=\"math-expression-evaluator.js\"></script>\r\nThis will export a global variable named mexp which can be used as given below.\r\n\r\n## Supported Maths Symbols  \r\n    +       Addition Operator eg. 2+3 results 5\r\n    -       Subtraction Operator eg. 2-3 results -1\r\n    /       Division operator eg 3/2 results 1.5 \r\n    \\       Multiplication Operator eg. 23 results 6\r\n    Mod     Modulus Operator eg. 3 Mod 2 results 1\r\n    (       Opening Parenthesis\r\n    )       Closing Parenthesis\r\n    Sigma   Summation eg. Sigma(1,100,n) results 5050\r\n    Pi      Product eg. Pi(1,10,n) results 3628800\r\n    n       Variable for Summation or Product\r\n    pi      Math constant pi returns 3.14\r\n    e       Math constant e returns 2.71\r\n    C       Combination operator eg. 4C2 returns 6\r\n    P       Permutation operator eg. 4P2 returns 12\r\n    !       factorial operator eg. 4! returns 24\r\n    log     logarithmic function with base 10 eg. log 1000 returns 3\r\n    ln      natural log function with base e eg. ln 2 returns .3010 \r\n    pow     power function with two operator pow(2,3) returns 8\r\n    ^       power operator eg. 2^3 returns 8\r\n    root    underroot function root 4 returns 2  \r\n**Trigonometric function**  \r\n\r\n    sin\r\n    cos\r\n    tan\r\n    asin\r\n    acos\r\n    atan\r\n    sinh\r\n    cosh\r\n    tanh\r\n    asinh\r\n    acosh\r\n    atanh\r\n\r\n##Usage  \r\nAn expression can be evaluated using  \r\n###mexp.eval method  \r\n        var value = mexp.eval(exp);  \r\n###2. Constituents of mexp.eval method  \r\n- Parse an expression and then add additional detail to the tokens using\r\n\r\n        var lexed = mexp.lex(exp);  \r\n    which returns a `mexp` constructor object which will be further processed by methods `toPostfix` and `postfixEval`  \r\n\r\n- Now, that object is needed to be converted to postfix notation using\r\n\r\n        var postfix = lexed.toPostfix();  \r\n    which converts the `mexp` object to postfix notation and return new `mexp` object  \r\n\r\n- Now to get the value of expression use `postfixEval`\r\n\r\n        var result = postfix.postfixEval();  \r\n    where result contains the result.\r\n\r\n##Extending tokens \r\n###How to define a token\r\n    To create a token that represent any function, variable,operator etc. a object needs to be declared with four properties.\r\n    1. token( string that is unique and used for tokenization)  \r\n        This property is used to identify and tokenize the string .This needs to be unique for every token.\r\n    2. type  \r\n        These are the following type that should be chose suitably when creating a tokens  \r\n        \r\n            0 : function with syntax function_name(Maths_exp)\r\n            2 : binary function  with syntax (Math_exp1)function_name(Math_exp2) eg. * / Mod\r\n            3 : Math constant values like e,pi \r\n            7 : function with syntax (Math_exp)function_name eg. !\r\n            8 : function with two comma separated parameters syntax function_name(Math_exp1,Math_exp2) eg. pow\r\n            12: function with three comma separated parameters syntax function_name(Math_exp1,Math_exp2,Math_exp3) eg. pow\r\n\r\n    3. value  \r\n        What is the value stored in that token.  \r\n        In detail for any function `value` should be a Javascript function with the corresponding arguments.  \r\n\r\n    4. show( string to show when displaying parsed formula)  \r\n        This is the value to display when the executed formula is displayed using `Mexp.formulaEval()`.\r\n        For eg. sin has `show` property sin while Sigma has show property `&Sigma;` so that it displays &Sigma; instead if plain Sigma.  \r\n\r\n#####Function with one parameter  \r\nFor defining a token for function which accepts only one argument like sine, an object with all four properties as explained above needs to be defined. For function with only one argument  \r\n`type` must be 0  \r\n`token` will be the function name  \r\n`show` can also be the function name as it is only used for displaying formula  \r\n`value` needs to be a function that accepts and operates on one argument.\r\n\r\nEg. Object if a function needs to be added for inverse of a number\r\n\r\n    {\r\n        type:0,\r\n        token:\"inverse\",\r\n        show:\"inverse\",\r\n        value:function(a){\r\n            return 1/a;\r\n        }\r\n    }\r\n\r\n#####Function with two parameters  \r\nFor defining a token for function which accepts two arguments like pow, an object with all four properties as [explained above](how-to-define-a-token) needs to be defined. For function with two argument  \r\n`type` must be 8  \r\n`token` will be the function name  \r\n`show` can also be the function name as it is only used for displaying formula  \r\n`value` needs to be a function that accepts and operates on two arguments.\r\n\r\nEg. Object if a function needs to be added for finding maximum of two number\r\n\r\n    {\r\n        type:8,\r\n        token:\"max\",\r\n        show:\"max\",\r\n        value:function(a,b){\r\n            if(a>b)\r\n                return a;\r\n            return b;\r\n        }\r\n    }\r\n\r\n#####Function with three parameters  \r\nFor defining a token for function which accepts three arguments like Sigma, an object with all four properties as [explained above](how-to-define-a-token) needs to be defined. For function with three argument  \r\n`type` must be 12  \r\n`token` will be the function name  \r\n`show` can also be the function name as it is only used for displaying formula  \r\n`value` needs to be a function that accepts and operates on two arguments.\r\n\r\nEg. Object if a function needs to be added for finding maximum of three number\r\n\r\n    {\r\n        type:12,\r\n        token:\"max_three\",\r\n        show:\"max_three\",\r\n        value:function(a,b,c){\r\n            if(a>b){\r\n                if(a>c)\r\n                return a;\r\n                else return c;\r\n            } \r\n            else {\r\n                if(b>c)\r\n                return b;\r\n                else return c;\r\n            }\r\n        }\r\n    }\r\n\r\n#####Variable \r\nFor defining a token for variable like pi, an object with all four properties as [explained above](how-to-define-a-token) needs to be defined. For a variable\r\n`type` must be 3  \r\n`token` will be the token name  \r\n`show` can be anything for displaying formula  \r\n`value` needs to be the unique name can also be token name.\r\n\r\n**Note : Value of the variable needs to be passed separately to the evaluator either in `eval` method or it's constituent `postfixEval` method**\r\n\r\nEg. Object to add a variable named git\r\n\r\n    {\r\n        type:3,\r\n        token:\"git\",\r\n        show:\"git\",\r\n        value:\"git\"\r\n    }\r\n\r\n#####Unary postfix function  \r\nFor defining a token for postfix function which accepts one arguments like factorial !, an object with all four properties as [explained above](how-to-define-a-token) needs to be defined. For postfix function with one argument  \r\n`type` must be 7  \r\n`token` will be the function name  \r\n`show` can also be the function name as it is only used for displaying formula  \r\n`value` needs to be a function that accepts and operates on one arguments.\r\n\r\nEg. Object if a postfix function needs to be added for inverse of a number\r\n\r\n    {\r\n        type:7,\r\n        token:\"inverse\",\r\n        show:\"inverse\",\r\n        value:function(a){\r\n            return 1/a;\r\n        }\r\n    }\r\n\r\n#####Binary infix function  \r\nFor defining a token for infix function which accepts two arguments like *,/ or Mod, an object with all four properties as [explained above](how-to-define-a-token) needs to be defined. For infix function with two argument  \r\n`type` must be 2  \r\n`token` will be the function name  \r\n`show` can also be the function name as it is only used for displaying formula  \r\n`value` needs to be a function that accepts and operates on two arguments.\r\n\r\nEg. Object if a binary function needs to be added for finding maximum of two number\r\n\r\n    {\r\n        type:2,\r\n        token:\"max\",\r\n        show:\"max\",\r\n        value:function(a,b){\r\n            if(a>b)\r\n                return a;\r\n            return b;\r\n        }\r\n    }\r\n\r\n\r\n#### Adding tokens using mexp.addToken method  \r\n    Mexp.addToken([token1,token2,...]);  \r\nThis method taken a list of tokens which are [explained above](#how-to-define-a-token) as arguments and adds them to the built-in tokens. After that the evaluator can be used as usual.  \r\n**Note : If a variable is being added to the evaluator then the value of the variable needs to be passed as explained below.**\r\n\r\n####Adding tokens using mexp.eval method  \r\n    var value = =mexp.eval(exp,[token1,token2,...],pair);  \r\n`eval` method takes three arguments where  \r\n+ first is the expression to be evaluated  \r\n+ second is list of tokens where structure of token is [explained here](#how-to-define-a-token)\r\n+ third is the key-value pair object. This object is the key-value mappings for all the variables added to the evaluator where key is equal to value property of token and value is equal to some number.\r\n\r\nEg. For [this token](#variable), the pair object would look like\r\n\r\n    {\"git\":100}\r\n\r\n####Adding tokens using constituents of mexp.eval method\r\n    var lexed = mexp.lex(exp,[token1,token2,...]);  \r\n`lex` method takes list of tokens as [explained here](#how-to-define-a-token) as second second arguments.\r\nIf variables are added to the evaluator then key-value pair needs to be passed to `postfixEval` method  \r\n\r\n    var result = postfix.postfixEval(pair);\r\nwhere pair object is the key-value mappings for all the variable where key is equal to value property of token and value is equal to some number.\r\n\r\nEg. For [this token](#variable), the pair object would look like  \r\n    {\"git\":100}\r\n##Error handling  \r\nThis evaluator throws exception with error message if any error occurs.  \r\nSo it is a good habit to catch the exception  \r\n\r\n    try{\r\n        mexp.eval(\"sin()\");\r\n    }\r\n    catch(e){\r\n        alert(e.message); //alert ) is not allowed after (\r\n    }\r\n","google":"UA-65740063-2","note":"Don't delete this file! It's used internally to help with page regeneration."}