{"name":"Math-expression-evaluator","tagline":"A simple but efficient evaluator for Math expression using Javascript","body":"## INTRODUCTION\r\n\r\nA simple to use and efficient evaluator for math expressions in Javascript\r\n\r\n##Topics\r\n\r\n- [Installation](#installation)\r\n    - [Node JS](#node-js)\r\n    - [Browser](#browser)\r\n- [Supported Math Symbols](#supported-maths-symbols)\r\n- [Usage](#usage)\r\n    - [mexp.eval()](#mexp.eval())\r\n    - [using constituents of mexp.eval() methods](#using-separate-methods)\r\n    - [user defined tokens](#user-defined-tokens)\r\n        - [understanding token structure](#understanding-token-structure)\r\n        - [using mexp.addToken](#mexp.addToken())\r\n        - [by argument to mexp.eval()](#argument-to-mexp-eval)\r\n        - [by argument to constituents of mexp.eval()](#argument-to-constituents-of-mexp-eval)\r\n    - [Error Handling](#error-handling)\r\n\r\n##Installation\r\n\r\n###Node js\r\n\tvar mexp = require('math-exoression-evaluator');\r\n\r\n###Browser\r\n\t<script src=\"math-expression-evaluator.js\"></script>\r\n\r\nThis will export a global variable named mexp which can be used as given below.\r\n\r\n## Supported Maths Symbols\r\n\r\n    +       Addition Operator eg. 2+3 results 5\r\n    -       Subtraction Operator eg. 2-3 results -1\r\n    /       Division operator eg 3/2 results 1.5 \r\n    \\       Multiplication Operator eg. 23 results 6\r\n    Mod     Modulus Operator eg. 3 Mod 2 results 1\r\n    (       Opening Parenthesis\r\n    )       Closing Parenthesis\r\n    Sigma   Summation eg. Sigma(1,100,n) results 5050\r\n    Pi      Product eg. Pi(1,10,n) results 3628800\r\n    n       Variable for Summation or Product\r\n    pi      Math constant pi returns 3.14\r\n    e       Math constant e returns 2.71\r\n    C       Combination operator eg. 4C2 returns 6\r\n    P       Permutation operator eg. 4P2 returns 12\r\n    !       factorial operator eg. 4! returns 24\r\n    log     logarithmic function with base 10 eg. log 1000 returns 3\r\n    ln      natural log function with base e eg. ln 2 returns .3010 \r\n    pow     power function with two operator pow(2,3) returns 8\r\n    ^       power operator eg. 2^3 returns 8\r\n    root    underroot function root 4 returns 2\r\n>Trigonometric function  \r\n\r\n    sin\r\n    cos\r\n    tan\r\n    asin\r\n    acos\r\n    atan\r\n    sinh\r\n    cosh\r\n    tanh\r\n    asinh\r\n    acosh\r\n    atanh\r\n\r\n##Usage\r\n\r\nAn expression can be evaluated using \r\n\r\n1. ####mexp.eval()  \r\n\r\n        var value = mexp.eval(exp);\r\n\r\n2. ####Constituents of mexp.eval method directly which are explained below\r\n\r\n    * Parse an expression and then add additional detail to the tokens using  \r\n    \r\n            var lexed = mexp.lex(exp);  \r\n\r\n        which returns a `mexp` constructor object which will further processed by methods `toPostfix` and `postfixEval`\r\n\r\n    * Now, that object is needed to be converted to postfix notation using  \r\n\r\n    \t    var postfix = lexed.toPostfix();  \r\n\r\n        which converts the `mexp` object to postfix notation and return new `mexp` object\r\n\r\n    * Now to get the value of expression use `postfixEval`  \r\n\r\n            var result = postfix.postfixEval();  \r\n\r\n        where result contains the result.\r\n\r\n##Using variables\r\n1. ####Token\r\n\r\n    Every token in this evaluator has four basic properties  \r\n    + type  \r\n\r\n        These are the following type that should be chose suitably when creating a tokens  \r\n        0 : function with syntax function_name(Maths_exp)\r\n        2 : binary function  with syntax (Math_exp1)function_name(Math_exp2) eg. * / Mod\r\n        3 : Math constant values like e,pi \r\n        7 : function with syntax (Math_exp)function_name eg. !\r\n        8 : function with two comma separated parameters syntax function_name(Math_exp1,Math_exp2) eg. pow\r\n        12: function with three comma separated parameters syntax function_name(Math_exp1,Math_exp2,Math_exp3) eg. pow\r\n\r\n    + value \r\n        What is the value stored in that token.  \r\n        In detail for any function `value` should be a Javascript function with the corresponding arguments.  \r\n        Eg. a value for max of two no. would look like\r\n        \r\n            function(a,b){\r\n                if(a>b)\r\n                    return a;\r\n                else \r\n                    return b;\r\n            }\r\n\r\n    + show( string to show when displaying parsed formula)  \r\n        This is the value to display when the executed formula is displayed using `Mexp.formulaEval()`.\r\n        For eg. sin has `show` property sin while Sigma has show property `&Sigma;` so that it displays &Sigma; instead if plain Sigma.  \r\n         \r\n\r\n    + token( string that is unique and used for tokenization) \r\n        This property is used to identify and tokenize the string .This needs to be unique for every token.\r\n\r\n2. ####mexp.addToken()\r\n\r\n        Mexp.addToken([token1,token2,...]);\r\n\r\n    This method taken a list of tokens as arguments.\r\n\r\n3. ####argument to mexp.eval()\r\n\r\n        var value = =mexp.eval(exp,[token1,token2,...],{name:value});\r\n\r\n    Where token1 is something like \r\n\r\n\t{type:3,show:\"value for formula evaluator\",ev:\"name\",preced:0,token:\"name\"}\r\n\r\n    and third argument is key-value pair which maps the value to variable name.\r\n\r\n4. ####argument toconstituents of mexp.eval()\r\n\r\n        var lexed = mexp.lex(exp,[token1,token2,...]);\r\n\r\n    Where token1 is something like \r\n\r\n    > {type:3,show:\"value for formula evaluator\",ev:\"name\",preced:0,token:\"name\"}\r\n\r\n    To evaluate variable also pass the key-value pair to postfixEval method\r\n\r\n        var result = postfix.postfixEval({name:value});","google":"UA-65740063-2","note":"Don't delete this file! It's used internally to help with page regeneration."}