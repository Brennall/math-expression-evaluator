{"name":"Math-expression-evaluator","tagline":"A simple but efficient evaluator for Math expression using Javascript","body":"## INTRODUCTION\r\n\r\nA simple to use and efficient evaluator for Math expression using [Javascript](#importing)\r\n\r\n## How to use\r\n\r\n##Importing\r\n\r\n**Node.js**\r\n\r\n\tvar mexp = require('math-exoression-evaluator');\r\n\r\n**Browser**\r\n\r\n\t<script src=\"math-expression-evaluator.js\"></script>\r\n\r\nThis will export a global variable named mexp which can be used as given below.\r\n\r\n## Supported Maths Symbols\r\n\r\n    +       Addition Operator eg. 2+3 results 5\r\n\r\n    -       Subtraction Operator eg. 2-3 results -1\r\n\r\n    /       Division operator eg 3/2 results 1.5 \r\n\r\n    \\       Multiplication Operator eg. 23 results 6\r\n\r\n    Mod     Modulus Operator eg. 3 Mod 2 results 1\r\n\r\n    (       Opening Parenthesis\r\n\r\n    )       Closing Parenthesis\r\n\r\n    Sigma   Summation eg. Sigma(1,100,n) results 5050\r\n\r\n    Pi      Product eg. Pi(1,10,n) results 3628800\r\n \r\n    n       Variable for Summation or Product\r\n\r\n    pi      Math constant pi returns 3.14\r\n\r\n    e       Math constant e returns 2.71\r\n\r\n    C       Combination operator eg. 4C2 returns 6\r\n\r\n    P       Permutation operator eg. 4P2 returns 12\r\n\r\n    !       factorial operator eg. 4! returns 24\r\n\r\n    log     logarithmic function with base 10 eg. log 1000 returns 3\r\n\r\n    ln      natural log function with base e eg. ln 2 returns .3010 \r\n\r\n    pow     power function with two operator pow(2,3) returns 8\r\n\r\n    ^       power operator eg. 2^3 returns 8\r\n\r\n    root    underroot function root 4 returns 2\r\n\r\n>Trigonometric function\r\n\r\n    sin \r\n\r\n    cos\r\n\r\n    tan\r\n\r\n    asin\r\n\r\n    acos\r\n\r\n    atan\r\n\r\n    sinh\r\n\r\n    cosh\r\n\r\n    tanh\r\n\r\n    asinh\r\n\r\n    acosh\r\n\r\n    atanh\r\n\r\n\r\n##Basic usage\r\n\r\nEvaluate an expression using \r\n\r\n\tvar value = mexp.eval(exp);\r\n\r\nOr you can use the constituents of eval method directly which are listed below\r\n\r\nParse an expression and then add additional detail to the tokens using\r\n\r\n\tvar lexed = mexp.lex(exp);\r\n\r\nwhich returns a mexp constructor object which will further processed by toPostFix and postFixEval\r\n\r\nNow, that object is needed to be converted to postfix notation using\r\n\r\n\tvar postfix = lexed.toPostfix();\r\n\r\nwhich converts the mexp object to Postfix notation and return new mexp object\r\n\r\nNow to get the value of expression use postfixEval\r\n\r\n\tvar result = postfix.postfixEval();\r\n\r\nwhich is results\r\n\r\n##Using variables\r\n\r\nIf your expression has user defined variables then either\r\n\r\n1. Use addToken method using\r\n\r\n\t\tMexp.addToken([token1,token2,...]);\r\n\r\n3. eval method takes two extra arguments for user defined variable\r\n\r\n\t\tvar value = =mexp.eval(exp,[token1,token2,...],{name:value});\r\n\r\nWhere token1 is something like \r\n\r\n\t{type:3,show:\"value for formula evaluator\",ev:\"name\",preced:0,token:\"name\"}\r\n\r\nand third argument is key-value pair which maps the value to variable name.\r\n\r\n2. lex method takes another argument for user defined variable\r\n\r\n\t\tvar lexed = mexp.lex(exp,[token1,token2,...]);\r\n\r\nWhere token1 is something like \r\n\r\n\t{type:3,show:\"value for formula evaluator\",ev:\"name\",preced:0,token:\"name\"}\r\n\r\nTo evaluate variable also pass the key-value pair to postfixEval method\r\n\r\n\tvar result = postfix.postfixEval({name:value});\r\n\t\t","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}