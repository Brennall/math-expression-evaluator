{"name":"Math-expression-evaluator","tagline":"A simple but efficient evaluator for Math expression using Javascript","body":"## INTRODUCTION\r\n\r\nA simple to use and efficient evaluator for Math expression using Javascript\r\n\r\n## How to use\r\n\r\n##Basic usage\r\n\r\nParse an expression and then add additional detail to the tokens using\r\n\r\n\tvar lexed = mexp.lex(exp);\r\n\r\nwhich returns a mexp constructor object which will further processed by toPostFix and postFixEval\r\n\r\nNow, that object is needed to be converted to postfix notation using\r\n\r\n\tvar postfix = lexed.toPostfix();\r\n\r\nwhich converts the mexp object to Postfix notation and return new mexp object\r\n\r\nNow to get the value of expression use postfixEval\r\n\r\n\tvar result = postfix.postfixEval();\r\n\r\nwhich is results\r\n\r\n##Using variables\r\n\r\nIf your expression has user defined variables then either\r\n\r\n1. Use addToken method using\r\n\r\n\t\tMexp.addToken([token1,token2,...]);\r\n\r\n2. lex method takes another argument for user defined variable\r\n\r\n\t\tvar lexed = a.lex(exp,[token1,token2,...]);\r\n\r\nWhere token1 is something like \r\n\r\n\t{type:3,show:\"value for formula evaluator\",ev:\"name\",preced:0,token:\"name\"}\r\n\r\nTo evaluate variable also pass the key-value pair to postfixEval method\r\n\r\n\tvar result = postfix.postfixEval({name:value});\r\n\t\t","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}